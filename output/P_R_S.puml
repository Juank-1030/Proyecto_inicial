' Generated by UML Generator
' Encoded: xLhhS-Es4V_klu8VUJshSvUa-U1fCz59igtMhv5qhsOoDn09IQWXG0L0sqec_tiN044284NHRgRNcVQ37rpkBXRx-641y4Ufa535bfx8Uy9sIA1jab4avL0fGPQ5mjECipdv1ITlJZOanqb6H4RnoOdXIaQ8FI2P_7gI98DVGPSYsMz9PeXpmjOKAyxEIYxDiu81y5dortFzLnCihsEvGynGrmBjDYGxIoxiF_ARiIOlKNQ_5hnW-OXJNWWGWx-YrZFTeZMeDtyqbI__WJC5wg-8L7--DKy_w1ToWtOOw9T8RgxHhdnrcimrVOnb9iXE4SuCyq3_iWQcYYWA8yp1EsnzcZoIN6tE4i90TeF9UgFAX-KwCF4Lg7XTEMYDLQdkbUUSrnAh3qII9SNfW_rxbYmvfnWnu7lW9DTSkK2FgS0hB33Bi3NyB74JoFHejNrcdcTsMfuEB934XvHuV63HEHUuzhb8pG1MlHl64tX4HALRGYcH618dbyOTDSD0O6E_Hx6sU3h0EphXh5y-wZUWel7YqhtuBSn5dK8c7r_l4BnErtKIkJ4gYJZQDezzdvdKQixOPSNhM4Fg2qVHU5L5hoMz6xQDCANMda299coGdF4bLrLsbCIvWbW5n1sNH9lroVcmedokA7LHdIKp23_IPMl61GiYafcpjYmrazbHb65ZYXy_WRVyeKaspCR49dE3xAQeQVLyNhj9HcIjOi7Jd0WmbcZ4QIJc5jrZLrmHUSeUcYyWr-wSyy8KTEJF8TbMnoilJhfw77FwLEB2FYY8Eje6LMtULZ1nDprBSbw0PSbVac__-FQxjz_h8EG4i5DXKKNmoOrIKVODIYE9YFmGOKmTO6EC3N7vFn8OGPfZb2Dda__QcYIuPU5sZYzm--0eE9ZKqZWR4w_mga5xluifO_x8Ojeb5-GNpXIYC0_mFG1YX5g6xGCM49KE9advutK_VOxrgCvi0xM7DUgb33-E_SWtk6m60jieG9sQJGTHJzx6JrEMPBt68jrXaM4mUDqO7nBR3HgcUrGKnukXohUeTgKtGdvWViSBoJ9vArJBzBtbjPdyZOgy4tmji9Jla8ZQc_7aVFZ-Ql75WYgKvZTlMjz_Tk_VVj_Ey74wNbmwfZ-ryrnEfXUNYvh9S2tNO5K4pSi6vQc6W-g_kbynQqRTiHYCA0Iq0mfclY8rTOkU8ae7T7XUQ_OmBfGbJzeSxpG9HtifW5THh1mIGUjaV36PEwz-r-ABq56_Dy9MPgKlGSd_RH2yzDjiUFvOHUhPY3Zequi-6-aWnQsDgPTJ8GuPczF7Dik_1jRDEChBNXDwE-ZPXqAWlTapwMRFR88ePckl8bmVAIkAi2sfQTjC6ssxKTElwUU7WyK0ewUU-gfFdk-8WBJmLp0foPhPRKhb9SepL5NYQMBtV8lz3hUrWQup1PyKe9lJ_2eKDmkGB1_yEGLDgvl-onGCK9wRBdhd8hoBGsmYKKsHi1mxreD9eRDHXqyxh1b0ltMLPGx_zFDFFtkIKxRYtb11KfSidyBtNXt0oy-jBvyBRZR6jittSwZ1OZS8RHxs4Xke1tPHVVP64Z0dJF1Bw6-ZTPO2w4xsm6UROSEgwpwYRNcX4pmGxLeYpEpQrj01k7k6MCwtBU1JReKE9Sd0WIxmA2Gql9MSzkbpp5_iSgJm7H9ADZPp7UEyPBzr26ZhxJgXzpLKHO1aKYL28za9LoQGyDky3piS64xTGbTiwlhsR-6UkcvnplmkyH36DVid1PR7fixmIiRWQMaLW1g-MqWjuat36dw7HO12HWMd3rXCf29RY61-7PW1NO_f9BbHXwWPP17QLKXy3dxGsRA5DgsQ5CYk49N6fXpjvJpRuBoWs2bc1QNbkwd6W_Zzu6tvzfhdk5MhFLefezrO6geNqbUiiSnK1n2p-na6jM7AGafT6KrrcfbACeaI0MBbLJtv0uSOqRBZ1TK_QDlk5C6vaP3XkOSiTZkwRxxn3bM28TfMiTW8R-rfO_V76K37bHKKKgFAZ0k1SRvFNUcOvMFA58OjuWymGO9PZc9wuCjXfeW_LC0PyDJJZdd0CweGh65lHpVS3ZNwxD9BttG53stdgSAaIk0PFuCaWVnJGQhwmJAEyu1BLXFpqacqvTYAC28tliNyFjeRPm1O1LLplMc1Eiw2-2c1c5nXOQjskXfnmZAIOyyO_t3jK2xvftK7UCf5eCgJjBa-UDk-vYbhMQ-ZjmiiozNO7UGDLUe1jtRDQG9MjDPKUDXfB1wgr0FwK3oKS9LklTKfLUUpXug7pQpTZRACYnmMul5mlk45pQSC5Xr4zParH5A98WCb8oxqCINT1qrFB3ehs8XlTnGAUawskavr7zWbCSpp8Sjd9fosGvQT_DSLAlIpQEJmmdQH3xYH31qoDtYDUieCiwmm4ouzFsNNK0C4NE5AkNjUaoUS5Sfu_53jj1YgywJOVIHgSzweosPm33RqSzijB01Ro02j-he9nCqg6Ntp5SiaumLpIs8ayiexwG2c4i4ZivfBwrSgEErkrtZq2nJKJrasS_pF0j8C5D6zrjFIJ3Iaxy1MBAhA6sQ2Ipc6xgXJokRQi51yYymP20oumSmPFc6vV4bDzfmmXRr0M9ZzAkpVhT1MRDEE7jkUi4-bEWLqVykYYcsM58VsmfMKIKHmLxXnY5fVGviy0N38kFVt6tbpCHoDqcXNgpD7qv2dkcEEoiNq0tK_PX03qUPQYnyGBP0Owiqloi1dNbtrQjOSVPgxVHkgT9MMd2PsZj2c5OX65LgQAAnfOrnRybmx6kCU6cHMA9J2xWqgEoEbGOVL2WnR7edyJYtkz4t_oG-sfmkhsN2XzWQr3gXDtYYcfudUOny-R8loPLIZVQNuQZYxc7ovkvrF5zFRc-eQuSsRy8xWUlZfos9ouvraQvOtLMO2dDnmvYeyjO6LjSEzn2PI7o5eo9YoJ6083rjt2iXYco8X6j5R4I4LZFftBBZP_JMrLBS8m3R6VKQhKM1aGU0IiHpWyKb1zuglEA13UNJS2XrjGfTalIaNcgCYPUAeEThYwaZkg9HT8FjBlJCj2ym3y5E3uUG1_haLEHRTKjCSDfbSItNnbM4rwwAjBBIakBdxFE0138kgxg80ThVwid2UOOO4uJtSi4D2OXqVyprHVzUDQ25Lz-GjDsmAmRhS-EkS2rX9ZyjKovv_8jfFf6_MNEa3DRUI7sT_po0-sQPVLEeLsCQoatcwPg3lFRjd_94PB-d3yKuH-FrO0q4vXawT2yxplacZ8Q1FNLxhxtJWfzfV3XKqFaUNynetdu4a6kBhVUm1QEheizx125bdK9s8zO5hZ4e8OLtE2oKdsvtQFsEacuBINkmpSxwYWwC3UilelddMqaEenqHQ6imZMz8o4u9mzX4iOSDySMWol0UtxI2VUlcit5EMtQe1KLweYH1So9wncJ8dtKFWFLGi03_Ek_4ftcEwRBl1I2pxHCX2WqsraBkkEastTTRtngIwuWYe2q52OkD6PWdhKtH18ZXVdILEzCYLYJteUlQLIS-lPuxShFoUDnxF-tRCUIVwnE73PBQOZkhUyDl_-5SEph3_V-Jmt_sHGwzSAx_q_iDWuBvORb3CrzibbGCr_ZZsn7pJgldh6lS_imhVc9i-hKPBsIV3OAx8gaTxEsRlUMDvHollOAlhGwi6vI75lygBMFM80ScEQg4n7BMcLQ3r8-meYotz5m
' URL: http://www.plantuml.com/plantuml/uml/xLhhS-Es4V_klu8VUJshSvUa-U1fCz59igtMhv5qhsOoDn09IQWXG0L0sqec_tiN044284NHRgRNcVQ37rpkBXRx-641y4Ufa535bfx8Uy9sIA1jab4avL0fGPQ5mjECipdv1ITlJZOanqb6H4RnoOdXIaQ8FI2P_7gI98DVGPSYsMz9PeXpmjOKAyxEIYxDiu81y5dortFzLnCihsEvGynGrmBjDYGxIoxiF_ARiIOlKNQ_5hnW-OXJNWWGWx-YrZFTeZMeDtyqbI__WJC5wg-8L7--DKy_w1ToWtOOw9T8RgxHhdnrcimrVOnb9iXE4SuCyq3_iWQcYYWA8yp1EsnzcZoIN6tE4i90TeF9UgFAX-KwCF4Lg7XTEMYDLQdkbUUSrnAh3qII9SNfW_rxbYmvfnWnu7lW9DTSkK2FgS0hB33Bi3NyB74JoFHejNrcdcTsMfuEB934XvHuV63HEHUuzhb8pG1MlHl64tX4HALRGYcH618dbyOTDSD0O6E_Hx6sU3h0EphXh5y-wZUWel7YqhtuBSn5dK8c7r_l4BnErtKIkJ4gYJZQDezzdvdKQixOPSNhM4Fg2qVHU5L5hoMz6xQDCANMda299coGdF4bLrLsbCIvWbW5n1sNH9lroVcmedokA7LHdIKp23_IPMl61GiYafcpjYmrazbHb65ZYXy_WRVyeKaspCR49dE3xAQeQVLyNhj9HcIjOi7Jd0WmbcZ4QIJc5jrZLrmHUSeUcYyWr-wSyy8KTEJF8TbMnoilJhfw77FwLEB2FYY8Eje6LMtULZ1nDprBSbw0PSbVac__-FQxjz_h8EG4i5DXKKNmoOrIKVODIYE9YFmGOKmTO6EC3N7vFn8OGPfZb2Dda__QcYIuPU5sZYzm--0eE9ZKqZWR4w_mga5xluifO_x8Ojeb5-GNpXIYC0_mFG1YX5g6xGCM49KE9advutK_VOxrgCvi0xM7DUgb33-E_SWtk6m60jieG9sQJGTHJzx6JrEMPBt68jrXaM4mUDqO7nBR3HgcUrGKnukXohUeTgKtGdvWViSBoJ9vArJBzBtbjPdyZOgy4tmji9Jla8ZQc_7aVFZ-Ql75WYgKvZTlMjz_Tk_VVj_Ey74wNbmwfZ-ryrnEfXUNYvh9S2tNO5K4pSi6vQc6W-g_kbynQqRTiHYCA0Iq0mfclY8rTOkU8ae7T7XUQ_OmBfGbJzeSxpG9HtifW5THh1mIGUjaV36PEwz-r-ABq56_Dy9MPgKlGSd_RH2yzDjiUFvOHUhPY3Zequi-6-aWnQsDgPTJ8GuPczF7Dik_1jRDEChBNXDwE-ZPXqAWlTapwMRFR88ePckl8bmVAIkAi2sfQTjC6ssxKTElwUU7WyK0ewUU-gfFdk-8WBJmLp0foPhPRKhb9SepL5NYQMBtV8lz3hUrWQup1PyKe9lJ_2eKDmkGB1_yEGLDgvl-onGCK9wRBdhd8hoBGsmYKKsHi1mxreD9eRDHXqyxh1b0ltMLPGx_zFDFFtkIKxRYtb11KfSidyBtNXt0oy-jBvyBRZR6jittSwZ1OZS8RHxs4Xke1tPHVVP64Z0dJF1Bw6-ZTPO2w4xsm6UROSEgwpwYRNcX4pmGxLeYpEpQrj01k7k6MCwtBU1JReKE9Sd0WIxmA2Gql9MSzkbpp5_iSgJm7H9ADZPp7UEyPBzr26ZhxJgXzpLKHO1aKYL28za9LoQGyDky3piS64xTGbTiwlhsR-6UkcvnplmkyH36DVid1PR7fixmIiRWQMaLW1g-MqWjuat36dw7HO12HWMd3rXCf29RY61-7PW1NO_f9BbHXwWPP17QLKXy3dxGsRA5DgsQ5CYk49N6fXpjvJpRuBoWs2bc1QNbkwd6W_Zzu6tvzfhdk5MhFLefezrO6geNqbUiiSnK1n2p-na6jM7AGafT6KrrcfbACeaI0MBbLJtv0uSOqRBZ1TK_QDlk5C6vaP3XkOSiTZkwRxxn3bM28TfMiTW8R-rfO_V76K37bHKKKgFAZ0k1SRvFNUcOvMFA58OjuWymGO9PZc9wuCjXfeW_LC0PyDJJZdd0CweGh65lHpVS3ZNwxD9BttG53stdgSAaIk0PFuCaWVnJGQhwmJAEyu1BLXFpqacqvTYAC28tliNyFjeRPm1O1LLplMc1Eiw2-2c1c5nXOQjskXfnmZAIOyyO_t3jK2xvftK7UCf5eCgJjBa-UDk-vYbhMQ-ZjmiiozNO7UGDLUe1jtRDQG9MjDPKUDXfB1wgr0FwK3oKS9LklTKfLUUpXug7pQpTZRACYnmMul5mlk45pQSC5Xr4zParH5A98WCb8oxqCINT1qrFB3ehs8XlTnGAUawskavr7zWbCSpp8Sjd9fosGvQT_DSLAlIpQEJmmdQH3xYH31qoDtYDUieCiwmm4ouzFsNNK0C4NE5AkNjUaoUS5Sfu_53jj1YgywJOVIHgSzweosPm33RqSzijB01Ro02j-he9nCqg6Ntp5SiaumLpIs8ayiexwG2c4i4ZivfBwrSgEErkrtZq2nJKJrasS_pF0j8C5D6zrjFIJ3Iaxy1MBAhA6sQ2Ipc6xgXJokRQi51yYymP20oumSmPFc6vV4bDzfmmXRr0M9ZzAkpVhT1MRDEE7jkUi4-bEWLqVykYYcsM58VsmfMKIKHmLxXnY5fVGviy0N38kFVt6tbpCHoDqcXNgpD7qv2dkcEEoiNq0tK_PX03qUPQYnyGBP0Owiqloi1dNbtrQjOSVPgxVHkgT9MMd2PsZj2c5OX65LgQAAnfOrnRybmx6kCU6cHMA9J2xWqgEoEbGOVL2WnR7edyJYtkz4t_oG-sfmkhsN2XzWQr3gXDtYYcfudUOny-R8loPLIZVQNuQZYxc7ovkvrF5zFRc-eQuSsRy8xWUlZfos9ouvraQvOtLMO2dDnmvYeyjO6LjSEzn2PI7o5eo9YoJ6083rjt2iXYco8X6j5R4I4LZFftBBZP_JMrLBS8m3R6VKQhKM1aGU0IiHpWyKb1zuglEA13UNJS2XrjGfTalIaNcgCYPUAeEThYwaZkg9HT8FjBlJCj2ym3y5E3uUG1_haLEHRTKjCSDfbSItNnbM4rwwAjBBIakBdxFE0138kgxg80ThVwid2UOOO4uJtSi4D2OXqVyprHVzUDQ25Lz-GjDsmAmRhS-EkS2rX9ZyjKovv_8jfFf6_MNEa3DRUI7sT_po0-sQPVLEeLsCQoatcwPg3lFRjd_94PB-d3yKuH-FrO0q4vXawT2yxplacZ8Q1FNLxhxtJWfzfV3XKqFaUNynetdu4a6kBhVUm1QEheizx125bdK9s8zO5hZ4e8OLtE2oKdsvtQFsEacuBINkmpSxwYWwC3UilelddMqaEenqHQ6imZMz8o4u9mzX4iOSDySMWol0UtxI2VUlcit5EMtQe1KLweYH1So9wncJ8dtKFWFLGi03_Ek_4ftcEwRBl1I2pxHCX2WqsraBkkEastTTRtngIwuWYe2q52OkD6PWdhKtH18ZXVdILEzCYLYJteUlQLIS-lPuxShFoUDnxF-tRCUIVwnE73PBQOZkhUyDl_-5SEph3_V-Jmt_sHGwzSAx_q_iDWuBvORb3CrzibbGCr_ZZsn7pJgldh6lS_imhVc9i-hKPBsIV3OAx8gaTxEsRlUMDvHollOAlhGwi6vI75lygBMFM80ScEQg4n7BMcLQ3r8-meYotz5m
' Generated on: 2025-10-11T01:57:25.352522200

@startuml
skinparam classAttributeIconSize 0
hide circle

class Canvas {
  -{static} canvasSingleton: Canvas
  -frame: JFrame
  -canvas: CanvasPane
  -graphic: Graphics2D
  -backgroundColour: Color
  -canvasImage: Image
  -objects: List<Object>
  -shapes: HashMap<Object, ShapeDescription>
  --
  -Canvas(title: String, width: int, height: int, bgColour: Color)
  +{static} getCanvas(): Canvas
  +setVisible(visible: boolean): void
  +draw(referenceObject: Object, color: String, shape: Shape): void
  +erase(referenceObject: Object): void
  +setForegroundColor(colorString: String): void
  +wait(milliseconds: int): void
  -redraw(): void
  -erase(): void
  +getSizeCanvasW(): int
  +getSizeCanvasH(): int
}

class CanvasPane {
  +paint(g: Graphics): void
}

class ShapeDescription {
  -shape: Shape
  -colorString: String
  --
  +ShapeDescription(shape: Shape, color: String)
  +draw(graphic: Graphics2D): void
}

class Cell {
  -color: String
  -hasRobot: boolean
  -hasStore: boolean
  -positionX: int
  -positionY: int
  -background: Rectangle
  -cell: Rectangle
  --
  +Cell()
  +placeRobot(): void
  +removeRobot(): void
  +placeStore(): void
  +removeStore(): void
  +hasRobot(): boolean
  +hasStore(): boolean
  +moveTo(direction: String): void
  +makeVisible(): void
  +makeInvisible(): void
  +getPositionX(): int
  +getPositionY(): int
  +getColor(): String
  +setPosition(x: int, y: int): void
}

class Circle {
  +{static} PI: double = 3.1416
  -diameter: int
  -xPosition: int
  -yPosition: int
  -color: String
  -isVisible: boolean
  --
  +Circle()
  +Circle(areaDeseada: double)
  +Circle(diametroDeseado: int)
  +makeVisible(): void
  +makeInvisible(): void
  -draw(): void
  -erase(): void
  +moveRight(): void
  +moveLeft(): void
  +moveUp(): void
  +moveDown(): void
  +moveHorizontal(distance: int): void
  +moveVertical(distance: int): void
  +slowMoveHorizontal(distance: int): void
  +slowMoveVertical(distance: int): void
  +changeSize(newDiameter: int): void
  +changeColor(newColor: String): void
  +area(): double
  +bigger(percentage: int): void
  +getDiameter(): int
  +getX(): int
  +getY(): int
  +getColor(): String
  +isVisible(): boolean
  +setDiameter(diameter: int): void
  +setPosition(x: int, y: int): void
  +setColor(color: String): void
  +setVisible(isVisible: boolean): void
}

class ProgressBar {
  -{static} DEFAULT_X: int = 20
  -{static} DEFAULT_Y: int = 160
  -{static} DEFAULT_WIDTH: int = 50
  -{static} DEFAULT_HEIGHT: int = 500
  -bgBar: Rectangle
  -bar: Rectangle
  -x: int
  -y: int
  -width: int
  -height: int
  -currentProfit: int
  -maxProfit: int
  -isVisible: boolean
  --
  +ProgressBar(visible: boolean)
  +setProgress(currentProfit: int, maxProfit: int): void
  +makeVisible(): void
  +makeInvisible(): void
}

class Rectangle {
  +{static} EDGES: int = 4
  -height: int
  -width: int
  -xPosition: int
  -yPosition: int
  -color: String
  -isVisible: boolean
  --
  +Rectangle()
  +makeVisible(): void
  +makeInvisible(): void
  +moveRight(): void
  +moveLeft(): void
  +moveUp(): void
  +moveDown(): void
  +moveHorizontal(distance: int): void
  +moveVertical(distance: int): void
  +slowMoveHorizontal(distance: int): void
  +slowMoveVertical(distance: int): void
  +changeSize(newHeight: int, newWidth: int): void
  +changeColor(newColor: String): void
  -draw(): void
  -erase(): void
  +getX(): int
  +getY(): int
  +getColor(): String
  +setHeight(height: int): void
  +setWidth(width: int): void
  +setPosition(x: int, y: int): void
  +setColor(color: String): void
  +setVisible(isVisible: boolean): void
}

class Road {
  -cells: ArrayList<Cell>
  -length: int
  -positions: int
  -robot: Robot
  -store: Store
  -visible: boolean
  --
  +Road(length: int)
  +drawSpiral(): void
  +assignObjectPosition(location: int, objectType: String): void
  +moveRobotVisual(oldLocation: int, meters: int, robot: Robot): void
  +reposition(oldLocation: int, meters: int, robot: Robot): void
  -addCell(px: int, py: int): void
  -cellPosition(index: int, x: int, y: int): void
  +getCells(): ArrayList<Cell>
  +getPositions(): int[][]
  +getCellInfo(index: int): String
  +getCellX(index: int): int
  +getCellY(index: int): int
  +makeVisible(): void
  +makeInvisible(): void
  +assignStore(store: Store): void
  +assignRobot(robot: Robot): void
}

class Robot {
  -color: String
  -positionX: int
  -positionY: int
  -size: int
  -robotHead: Rectangle
  -leftEye: Circle
  -rightEye: Circle
  -mouth: Rectangle
  -isVisible: boolean
  --
  +Robot(visible: boolean)
  -getRandomColor(): String
  +moveTo(x: int, y: int): void
  -slowMoveTo(targetX: int, targetY: int): void
  -updateParts(): void
  +placeTo(x: int, y: int): void
  +makeVisible(): void
  +makeInvisible(): void
  +getX(): int
  +getY(): int
}

class SilkRoad {
  -length: int
  -stores: int
  -robots: int
  -positions: int
  -road: Road
  -profit: int
  -lastOperationOK: boolean
  -progressBar: ProgressBar
  -visible: boolean
  -maxProfit: int
  -tenges: int
  -robotRefs: Robot
  -storeRefs: Store
  -robotOrigins: int
  -profitPerLocation: int
  -solverEstimatedMaxProfit: int = 0
  -originalStoreTenges: int
  -useFastMovement: boolean = false
  -daysSchedule: int = null
  -dayIndexSchedule: int = -1
  -dayMode: boolean = false
  --
  +SilkRoad(length: int)
  +SilkRoad(schedule: int[][])
  -checkReboots(): void
  +getLength(): int
  -getRobots(): int[][]
  +profitPerMove(): void
  +placeStore(location: int, tenges: int): void
  +emptiedStores(): void
  +resupplyStores(): void
  +placeRobot(location: int): void
  +moveRobot(location: int, meters: int): void
  +moveRobots(): void
  -calculateMaxProfitGreedy(robots: List<Integer>, tiendas: List<Integer>): int
  -getActiveRobots(): List<Integer>
  -getActiveStores(): List<Integer>
  +returnRobots(): void
  +makeInvisible(): void
  +makeVisible(): void
  +setFastMovement(fast: boolean): void
  +reboot(): void
  -checkReboots(silentMode: boolean): void
  +profit(): int
  +stores(): int[][]
  +robots(): int[][]
  +finish(): void
  +ok(): boolean
  +consultStatistics(): void
  -transferTengesIfCoincide(): int
  +removeStore(location: int): void
  +removeRobot(location: int): void
  -updateMaxProfit(): void
  -updateProgressBar(): void
}

class SilkRoadC1Test {
  -hasStoreAt(stores: int[][], loc: int, tenges: int): boolean
  -hasRobotAt(robots: int[][], loc: int): boolean
  -getRobotTenges(robots: int[][], loc: int): int
  -getStoreTenges(stores: int[][], loc: int): int
  +accordingDAShouldInitializeConstructorCorrectly(): void
  +accordingDAShouldRunCompleteSimulation(): void
  +accordingDAShouldAddAndRemoveObjects(): void
  +accordingDAShouldMoveRobotsCorrectly(): void
  +accordingDAShouldCalculatePositiveProfit(): void
  +accordingDAShouldCalculateNegativeProfit(): void
  +accordingDAShouldAccumulateTengesInMultipleMovements(): void
  +accordingDAShouldExecuteConsultStatistics(): void
  +accordingDAShouldCleanupWithFinish(): void
  +accordingDAShouldRebootCorrectly(): void
  +accordingDAShouldOptimizeWithMoveRobots(): void
}

class SilkRoadCC2Test {
  -hasStoreAt(stores: int[][], loc: int, tenges: int): boolean
  -hasRobotAt(robots: int[][], loc: int): boolean
  -countRobots(robots: int[][]): int
  -countStores(stores: int[][]): int
  -getRobotTenges(robots: int[][], loc: int): int
  -getStoreTenges(stores: int[][], loc: int): int
  +accordingDAShouldInitializeWithScheduleCorrectly(): void
  +accordingDAShouldAddObjectsSequentiallyWithReboots(): void
  +accordingDAShouldPreserveObjectsAcrossDays(): void
  +accordingDAShouldFinishAutomaticallyWhenScheduleEnds(): void
  +accordingDAShouldCalculatePositiveProfitCorrectly(): void
  +accordingDAShouldAllowNegativeProfitMovements(): void
  +accordingDAShouldAccumulateTengesInMultipleMovements(): void
  +accordingDAShouldRunCompleteSimulationWithDayMode(): void
  +accordingDAShouldCleanupCompletelyOnFinish(): void
}

class SilkRoadContest {
  -robotPos: int
  -storeTenges: int
  -storeExists: boolean
  -profit: int
  --
  -SilkRoadContest(length: int)
  +{static} solve(days: int[][]): int[]
  -calculateOptimalProfit(): void
  -evaluarAsignaciones(robots: List<Integer>, tiendas: List<Integer>, tiendaIdx: int, asignacion: int[], profitActual: int): int
  -calcularProfitDeAsignacion(robots: List<Integer>, tiendas: List<Integer>, asignacion: int[]): int
  -calcularProfitRuta(posInicial: int, tiendas: List<Integer>, reversa: boolean): int
  -getRobotsActivos(): List<Integer>
  -getTiendasActivas(): List<Integer>
  +{static} simulate(days: int[][], slow: boolean): void
}

class SilkRoadContestCTest {
  -{static} LARGE_POSITION: int = 1000
  -{static} MAX_TENGES: int = 10000
  --
  -allNonNegative(profits: int[]): boolean
  -isStrictlyIncreasing(profits: int[]): boolean
  -sum(arr: int[]): int
  -firstNonZeroIndex(profits: int[]): int
  -isNonDecreasing(profits: int[]): boolean
  +accordingCShouldHandleExtremeLongDistance(): void
  +accordingCShouldHandleExtremeHighTenges(): void
  +accordingCShouldHandleRobotsAtSamePosition(): void
  +accordingCShouldHandleStoresAtSamePosition(): void
  +accordingCShouldBeConsistentWithEventOrder(): void
  +accordingCShouldBeIdempotent(): void
  +accordingCShouldIncreaseWithProfitableStores(): void
  +accordingCShouldHandleRealisticCommerceScenario(): void
  +accordingCShouldHandleSparseDistribution(): void
  +accordingCShouldHandleStoreCluster(): void
  +accordingCShouldHandleInvalidEventFormat(): void
  +accordingCShouldHandleNegativePositions(): void
  +accordingCShouldHandleNegativeTenges(): void
  +accordingCShouldHandleLargeSchedule(): void
  +accordingCShouldHandleUnreachableStores(): void
  +accordingCShouldAccumulateProfits(): void
  +accordingCShouldIgnoreUnknownEventTypes(): void
  +accordingCShouldShowIncreasingProfitsWithGoodStores(): void
  +accordingCShouldHandleZeroDistance(): void
  +accordingCShouldMaintainMaxProfitAtEnd(): void
}

class SilkRoadContestTest {
  -isNonDecreasing(profits: int[]): boolean
  -getMaxProfit(profits: int[]): int
  +accordingDAShouldCalculateBasicSchedule(): void
  +accordingDAShouldHandleMultipleRobotsAndStores(): void
  +accordingDAShouldHandleEmptySchedule(): void
  +accordingDAShouldHandleNullSchedule(): void
  +accordingDAShouldReturnZeroWithOnlyRobots(): void
  +accordingDAShouldReturnZeroWithOnlyStores(): void
  +accordingDAShouldAllowNegativeProfits(): void
  +accordingDAShouldMaintainNonDecreasingProfits(): void
  +accordingDAShouldHandleSingleEvent(): void
  +accordingDAShouldHandleComplexSchedule(): void
  +accordingDAShouldExecuteSimulateWithoutErrors(): void
  +accordingDAShouldHandleNullInSimulate(): void
  +accordingDAShouldHandleUnorderedPositions(): void
  +accordingDAShouldOptimizeMultipleNearbyStores(): void
  +accordingDAShouldIgnoreEmptyStores(): void
}

class Store {
  -positionX: int
  -positionY: int
  -sizeRectangle: int
  -sizeTriangle: int
  -color: String
  -base: Rectangle
  -roof: Triangle
  -isVisible: boolean
  --
  +Store(visible: boolean)
  -getRandomColor(): String
  +changeColor(newColor: String): void
  +moveTo(x: int, y: int): void
  +makeVisible(): void
  +makeInvisible(): void
  +getX(): int
  +getY(): int
  +setPosition(x: int, y: int): void
}

class Triangle {
  +{static} VERTICES: int = 3
  -height: int
  -width: int
  -xPosition: int
  -yPosition: int
  -color: String
  -isVisible: boolean
  --
  +Triangle()
  +makeVisible(): void
  +makeInvisible(): void
  +moveRight(): void
  +moveLeft(): void
  +moveUp(): void
  +moveDown(): void
  +moveHorizontal(distance: int): void
  +moveVertical(distance: int): void
  +slowMoveHorizontal(distance: int): void
  +slowMoveVertical(distance: int): void
  +changeSize(newHeight: int, newWidth: int): void
  +changeColor(newColor: String): void
  -draw(): void
  -erase(): void
  +setPosition(x: int, y: int): void
}

Canvas *-- Canvas
Canvas *-- CanvasPane
Canvas o-- ShapeDescription
Cell *-- Rectangle
ProgressBar *-- Rectangle
Road o-- Cell
Road *-- Robot
Road *-- Store
Robot *-- Rectangle
Robot *-- Circle
SilkRoad *-- Road
SilkRoad *-- ProgressBar
SilkRoad *-- Robot
SilkRoad *-- Store
Store *-- Rectangle
Store *-- Triangle
@enduml