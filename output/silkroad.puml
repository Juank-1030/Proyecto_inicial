' Generated by UML Generator
' Encoded: vLbVRzis47_Ffn3W5sM9WNR0zX1iHRqaROmbIn1xNOAY66Y9jhbGf41IITokttr7Kg98IdAJ1klGzIMjZqVo_l_kg9TI8Q6gWkx86y9A952HP1H9EL5Aa4Mby3JZR4RUu-JPpfhaECc8o2ZUsJ5SoQHIdF62LtAckC39XvqasOk8wIsHP47nGRBWd6B4TZLJjaPiXGyvvI9b-Cxyvo2PmQrijNkGt7AIQxO2tU0tTdyQaQVijhCmOZZ3aYXqmIN926SJk12484WprVVlV6p4FqIICDwAFXQ8vRmuI2xDlveorjTvV5zKcxB2ERx46LaGSSaNNAL2_vrZk4mU98If_KHggJoAfwS-GN0m219pq4mkiS0i0riemmu70r-cKCxTLlZhcGTJQksI-GffmXf98v1_cIOQ6mN44ZoXm1DNzd2FSkqe2vJTh0IlM0wcrnAn5SIOlXSaY4ZM8K1FZULBYZ9iRUDPLE22ttR9XjcwiSFS8JSgfe55zneb8x8-OixJd0WG5fHxklVtLbXTDCPBTnjZ-UJha6pZRzVpqvvicTFxEc8sZRFDHSxRhyXghR3m4jcdV0Dn3nBn1R1WSOQPH7zf2TReFN_OvRNDdJb_mxTOwC0s2jWqSj5nohCRd9kjoSzGMc4DDYcekhWe5SxFCDXT1kicxiD3-tq2WN0KtkD5YUmkUY7hXGNm4da6GLrWfYQKyZjWBLgnmkYdS9GxDs9hqyo_t7TtLUP8uGj08fa-8Mf4urTXFLEx-uZ8aZFD77ixGpIhA1Al4KFRucC_oGa0fMO9JnZrnqjFD5m8lW83o5-GiA7m0GvK9FkO71s_cln-El_pgl7szyzwrw-RzUS_zZFyCJsQdpHCF_Jpd1nFNv_CMoR3jLY1L56LNNGezwvQRzp_xaYkrkxN6kjwuNvcbO2qKw3vahJK0jr752BVH67imjspMd-iw_9MywJT-_QJyBRFZItdnKkEyXeG0O0WE2P2eCqf1CTF6f5Uc3o66FACqe2TT1HXSTDay6GXbK2Pudf1MkmqvJPOk1soZvOdzIuqDia5kfkLH23gQmRYanKxN_m5FdM806cBNERl9zoipZSbxglX3Q22sIeuczFyDDpkfVr-qgjbK0qQoppnf37ASzCEb0s-bPl8syPRJcd2SjomzaDYZQRQnTg4NIVx62phwlhstTjttiufMtBlgW2KQvQhSDt3SLYyxbryR0jXlMu1l3UyEhmUt6xndgfXbJIbjdT3ZPFndVl9riBiPLi3d7l3SFUrWWTeYMg399wwpaX6xr6dUHvrckUHXEdC_OWRzL5lTHqPTvrW5FNR8ugNwdW3l8TspDEikgX7D9ZjTCNfzkMX3lqrk-wKXr9l9A7NEBCyu0r8XwkQq_wwZbFLDFNR3YGCB8OecCcMhZXMHd3ghCH-d_HVHPKMnSwUFRsyDaNOy7-w_tVkZyQL9xS--huvANbmtIVx8HEG3-qgHmCTeoiGCq9lMaYEWDUKdWXrvLPODja0VyrwsAFevloynCA0rFcluO3RDYa7VfytXDpT3iZ8TecNSh0hi8lTpi3iF8SK9PucLlOBB09KrIlSS28wYyONlLP9_0gqR9pZH8O-SOceD3cUeusSPMkSLnGtJIIhAAtNfXgnulNnythrZEUuzrHJEHfVTjePjo3zWpNQDjFEgTdXfO8pW5PcOFwFMXyLp78z_ChhYlQJX-pMZOarD6ySaGxXuUCFXu6MCzWlcfSkMpPQAumpWQ7i4Cno54Y_snT8XjcYRCJRYSWzFQ8IR7MJuKEAhCgIRhehtYjDe5q_onPpXEOrx9vv1xgG1vtNDhXnRFIEisDyZxDAsHrDqcpP2NtibXxs5k190qvuckYgCZY1E-bzku_hCg_mMLDqNWi0katQb4FJrawPmYiiNe2bJBZ4z3Qc8DicK8pzgmBEWASDWvW78aLLWdNa7Mva1u0NyC4lMkaIVhJTXX-PG5E1PTOukxaqP9bA0bL71GNAZqnZEFyHnIdczVt2AUCHbz1xoBKlCR-9aHX0gA9gfYTr2SDwuB-cpxQrUheyv0IWECVMVuTsuWtVeMfFXJilE2K55qkISHa7AI2-XlpwEGfYW2j4smubEhVWEXP50-sTW3V0xvMFscJ-6-jG0lgFjaD9R_io5yrfPyb_CXXi60wXT69PFyePKrvm6NOE4JeQsl4zU4Z6uEyZkOQoSNHB1z7Sgupa5F19WsgBQVN_WkGzXtfRGD_QKLbtYoRiJCBnmNoqA62vK7z6jaAHmbmQoWMZ73HhdUneBTk-6dz3dqcY2Iw4rSTDS6wM2gXpGKBY0-Ux1P8u6kq4vyk3f3cmxRi2cJzhOdl0HuP_p_TVQ60QMOH-xFU4pZj9XfY2S_8P5EICm9Q-iSgmGhB2hEfWvYl_BFBeJxDmIew5zmJa4Vvl3q7nL_Jn-EyNSO_kVwhkMm--tlKnHD-Z34lKsvjPce_7viEl_VKT_EhZqlJeWk5ptPnkJuC9Ew3uCtF4EdnCTFcmtduWzGdt4jQhWlu3
' URL: http://www.plantuml.com/plantuml/uml/vLbVRzis47_Ffn3W5sM9WNR0zX1iHRqaROmbIn1xNOAY66Y9jhbGf41IITokttr7Kg98IdAJ1klGzIMjZqVo_l_kg9TI8Q6gWkx86y9A952HP1H9EL5Aa4Mby3JZR4RUu-JPpfhaECc8o2ZUsJ5SoQHIdF62LtAckC39XvqasOk8wIsHP47nGRBWd6B4TZLJjaPiXGyvvI9b-Cxyvo2PmQrijNkGt7AIQxO2tU0tTdyQaQVijhCmOZZ3aYXqmIN926SJk12484WprVVlV6p4FqIICDwAFXQ8vRmuI2xDlveorjTvV5zKcxB2ERx46LaGSSaNNAL2_vrZk4mU98If_KHggJoAfwS-GN0m219pq4mkiS0i0riemmu70r-cKCxTLlZhcGTJQksI-GffmXf98v1_cIOQ6mN44ZoXm1DNzd2FSkqe2vJTh0IlM0wcrnAn5SIOlXSaY4ZM8K1FZULBYZ9iRUDPLE22ttR9XjcwiSFS8JSgfe55zneb8x8-OixJd0WG5fHxklVtLbXTDCPBTnjZ-UJha6pZRzVpqvvicTFxEc8sZRFDHSxRhyXghR3m4jcdV0Dn3nBn1R1WSOQPH7zf2TReFN_OvRNDdJb_mxTOwC0s2jWqSj5nohCRd9kjoSzGMc4DDYcekhWe5SxFCDXT1kicxiD3-tq2WN0KtkD5YUmkUY7hXGNm4da6GLrWfYQKyZjWBLgnmkYdS9GxDs9hqyo_t7TtLUP8uGj08fa-8Mf4urTXFLEx-uZ8aZFD77ixGpIhA1Al4KFRucC_oGa0fMO9JnZrnqjFD5m8lW83o5-GiA7m0GvK9FkO71s_cln-El_pgl7szyzwrw-RzUS_zZFyCJsQdpHCF_Jpd1nFNv_CMoR3jLY1L56LNNGezwvQRzp_xaYkrkxN6kjwuNvcbO2qKw3vahJK0jr752BVH67imjspMd-iw_9MywJT-_QJyBRFZItdnKkEyXeG0O0WE2P2eCqf1CTF6f5Uc3o66FACqe2TT1HXSTDay6GXbK2Pudf1MkmqvJPOk1soZvOdzIuqDia5kfkLH23gQmRYanKxN_m5FdM806cBNERl9zoipZSbxglX3Q22sIeuczFyDDpkfVr-qgjbK0qQoppnf37ASzCEb0s-bPl8syPRJcd2SjomzaDYZQRQnTg4NIVx62phwlhstTjttiufMtBlgW2KQvQhSDt3SLYyxbryR0jXlMu1l3UyEhmUt6xndgfXbJIbjdT3ZPFndVl9riBiPLi3d7l3SFUrWWTeYMg399wwpaX6xr6dUHvrckUHXEdC_OWRzL5lTHqPTvrW5FNR8ugNwdW3l8TspDEikgX7D9ZjTCNfzkMX3lqrk-wKXr9l9A7NEBCyu0r8XwkQq_wwZbFLDFNR3YGCB8OecCcMhZXMHd3ghCH-d_HVHPKMnSwUFRsyDaNOy7-w_tVkZyQL9xS--huvANbmtIVx8HEG3-qgHmCTeoiGCq9lMaYEWDUKdWXrvLPODja0VyrwsAFevloynCA0rFcluO3RDYa7VfytXDpT3iZ8TecNSh0hi8lTpi3iF8SK9PucLlOBB09KrIlSS28wYyONlLP9_0gqR9pZH8O-SOceD3cUeusSPMkSLnGtJIIhAAtNfXgnulNnythrZEUuzrHJEHfVTjePjo3zWpNQDjFEgTdXfO8pW5PcOFwFMXyLp78z_ChhYlQJX-pMZOarD6ySaGxXuUCFXu6MCzWlcfSkMpPQAumpWQ7i4Cno54Y_snT8XjcYRCJRYSWzFQ8IR7MJuKEAhCgIRhehtYjDe5q_onPpXEOrx9vv1xgG1vtNDhXnRFIEisDyZxDAsHrDqcpP2NtibXxs5k190qvuckYgCZY1E-bzku_hCg_mMLDqNWi0katQb4FJrawPmYiiNe2bJBZ4z3Qc8DicK8pzgmBEWASDWvW78aLLWdNa7Mva1u0NyC4lMkaIVhJTXX-PG5E1PTOukxaqP9bA0bL71GNAZqnZEFyHnIdczVt2AUCHbz1xoBKlCR-9aHX0gA9gfYTr2SDwuB-cpxQrUheyv0IWECVMVuTsuWtVeMfFXJilE2K55qkISHa7AI2-XlpwEGfYW2j4smubEhVWEXP50-sTW3V0xvMFscJ-6-jG0lgFjaD9R_io5yrfPyb_CXXi60wXT69PFyePKrvm6NOE4JeQsl4zU4Z6uEyZkOQoSNHB1z7Sgupa5F19WsgBQVN_WkGzXtfRGD_QKLbtYoRiJCBnmNoqA62vK7z6jaAHmbmQoWMZ73HhdUneBTk-6dz3dqcY2Iw4rSTDS6wM2gXpGKBY0-Ux1P8u6kq4vyk3f3cmxRi2cJzhOdl0HuP_p_TVQ60QMOH-xFU4pZj9XfY2S_8P5EICm9Q-iSgmGhB2hEfWvYl_BFBeJxDmIew5zmJa4Vvl3q7nL_Jn-EyNSO_kVwhkMm--tlKnHD-Z34lKsvjPce_7viEl_VKT_EhZqlJeWk5ptPnkJuC9Ew3uCtF4EdnCTFcmtduWzGdt4jQhWlu3
' Generated on: 2025-10-27T16:45:02.589965

@startuml
skinparam classAttributeIconSize 0
hide circle

class AutonomousStore {
  +AutonomousStore(visible: boolean)
  +changeColor(newColor: String): void
  +makeVisible(): void
  +makeInvisible(): void
  #necesitaPosicionAleatoria(): boolean
}

class CasinoStore {
  -random: Random
  --
  +CasinoStore(visible: boolean)
  +changeColor(newColor: String): void
  +makeVisible(): void
  +makeInvisible(): void
  #puedeRecibirRobot(robotTenges: int, storeTenges: int): boolean
  #procesarTransferencia(tengesRecolectados: int): int
}

class Cell {
  -color: String
  -hasRobot: boolean
  -hasStore: boolean
  -positionX: int
  -positionY: int
  -background: Rectangle
  -cell: Rectangle
  --
  +Cell()
  +placeRobot(): void
  +removeRobot(): void
  +placeStore(): void
  +removeStore(): void
  +hasRobot(): boolean
  +hasStore(): boolean
  +moveTo(direction: String): void
  +makeVisible(): void
  +makeInvisible(): void
  +getPositionX(): int
  +getPositionY(): int
  +getColor(): String
  +setPosition(x: int, y: int): void
}

class FighterStore {
  +FighterStore(visible: boolean)
  +changeColor(newColor: String): void
  +makeVisible(): void
  +makeInvisible(): void
  #puedeRecibirRobot(robotTenges: int, storeTenges: int): boolean
  #procesarTransferencia(tengesRecolectados: int): int
  +obtenerMensajeRechazo(robotTenges: int, storeTenges: int): String
}

class NeverbackRobot {
  -directionLocked: int = 0
  -lastAttemptedMeters: int = 0
  --
  +NeverbackRobot(visible: boolean)
  +getDirectionLocked(): int
  +setDirectionLocked(direction: int): void
  +isMovementAllowed(meters: int): boolean
  +lockDirection(meters: int): void
  +resetDirection(): void
  #updateParts(): void
  +makeVisible(): void
  +makeInvisible(): void
  #recolectarTenges(tengesDisponibles: int): int
  +calcularGanancia(tengesRecolectados: int, distancia: int): int
  #obtenerMensajeRechazo(): String
}

class ProgressBar {
  -{static} DEFAULT_X: int = 20
  -{static} DEFAULT_Y: int = 160
  -{static} DEFAULT_WIDTH: int = 50
  -{static} DEFAULT_HEIGHT: int = 500
  -bgBar: Rectangle
  -bar: Rectangle
  -x: int
  -y: int
  -width: int
  -height: int
  -currentProfit: int
  -maxProfit: int
  -isVisible: boolean
  --
  +ProgressBar(visible: boolean)
  +setProgress(currentProfit: int, maxProfit: int): void
  +makeVisible(): void
  +makeInvisible(): void
}

class Road {
  -cells: ArrayList<Cell>
  -length: int
  -positions: int
  -robot: RobotAbstracto
  -store: StoreAbstracto
  -visible: boolean
  --
  +Road(length: int)
  +drawSpiral(): void
  +assignObjectPosition(location: int, objectType: String): void
  +moveRobotVisual(oldLocation: int, meters: int, robot: RobotAbstracto): void
  +reposition(oldLocation: int, meters: int, robot: RobotAbstracto): void
  -addCell(px: int, py: int): void
  -cellPosition(index: int, x: int, y: int): void
  +getCells(): ArrayList<Cell>
  +getPositions(): int[][]
  +getCellInfo(index: int): String
  +getCellX(index: int): int
  +getCellY(index: int): int
  +makeVisible(): void
  +makeInvisible(): void
  +assignStore(store: StoreAbstracto): void
  +assignRobot(robot: RobotAbstracto): void
  +transferirTenges(robot: RobotAbstracto, store: StoreAbstracto, tengesDisponibles: int): int
}

class Robot {
  +Robot(visible: boolean)
  #updateParts(): void
  +makeVisible(): void
  +makeInvisible(): void
  #recolectarTenges(tengesDisponibles: int): int
  +calcularGanancia(tengesRecolectados: int, distancia: int): int
}

abstract class RobotAbstracto {
  #positionX: int
  #positionY: int
  #size: int
  #color: String
  #isVisible: boolean
  #robotHead: Rectangle
  #leftEye: Circle
  #rightEye: Circle
  #mouth: Rectangle
  --
  +RobotAbstracto(visible: boolean)
  +moveTo(x: int, y: int): void
  #slowMoveTo(targetX: int, targetY: int): void
  +placeTo(x: int, y: int): void
  #initializeVisualParts(): void
  #getSpeed(): int
  #updateParts(): void
  +makeVisible(): void
  +makeInvisible(): void
  #recolectarTenges(tengesDisponibles: int): int
  #getRandomColor(): String
  +getX(): int
  +getY(): int
  +getColor(): String
  +isVisible(): boolean
  +calcularGanancia(tengesRecolectados: int, distancia: int): int
  +getTipo(): String
  #obtenerMensajeRechazo(): String
  #isMovementAllowed(meters: int): boolean
  #resetDirection(): void
}

class SilkRoad {
  -length: int
  -stores: int
  -robots: int
  -positions: int
  -road: Road
  -profit: int
  -lastOperationOK: boolean
  -progressBar: ProgressBar
  -visible: boolean
  -maxProfit: int
  -robotRefs: RobotAbstracto
  -storeRefs: StoreAbstracto
  -robotOrigins: int
  -profitPerLocation: int
  -originalStoreTenges: int
  -useFastMovement: boolean = false
  -daysSchedule: int = null
  -dayIndexSchedule: int = -1
  -dayMode: boolean = false
  --
  +SilkRoad(length: int)
  +SilkRoad(schedule: int[][])
  +getLength(): int
  +profitPerMove(): void
  +placeStore(location: int, tenges: int): void
  +placeStore(type: String, location: int, tenges: int): void
  -addStoreToLocation(store: StoreAbstracto, type: String, location: int, tenges: int): void
  -encontrarPosicionRandom(): int
  -crearTienda(type: String): StoreAbstracto
  -crearRobot(type: String): RobotAbstracto
  +emptiedStores(): void
  +resupplyStores(): void
  +placeRobot(location: int): void
  +placeRobot(type: String, location: int): void
  -addRobotToLocation(robot: RobotAbstracto, type: String, location: int): void
  +moveRobot(location: int, meters: int): void
  -executeRobotMovement(location: int, meters: int, r: RobotAbstracto): void
  -validateRobotMovement(r: RobotAbstracto, meters: int): boolean
  +moveRobots(): void
  -calculateMaxProfitGreedy(robots: List<Integer>, tiendas: List<Integer>): int
  -getActiveRobots(): List<Integer>
  -getActiveStores(): List<Integer>
  +returnRobots(): void
  +makeInvisible(): void
  +makeVisible(): void
  +setFastMovement(fast: boolean): void
  +reboot(): void
  -checkReboots(silentMode: boolean): void
  +profit(): int
  +stores(): int[][]
  +robots(): int[][]
  +finish(): void
  +ok(): boolean
  +consultStatistics(): void
  -transferTengesIfCoincide(robotCurrentTenges: int): int
  -transferTengesPolimorficos(location: int, collected: int, totalDisponible: int): int
  -mostrarRechazo(location: int, mensaje: String): int
  +removeStore(location: int): void
  +removeRobot(location: int): void
  -updateMaxProfit(): void
  -updateProgressBar(): void
}

class SilkRoadContest {
  -robotPos: int
  -storeTenges: int
  -storeExists: boolean
  -profit: int
  --
  -SilkRoadContest(length: int)
  +{static} solve(days: int[][]): int[]
  -calculateOptimalProfit(): void
  -getRobotsActivos(): List<Integer>
  -getTiendasActivas(): List<Integer>
  +{static} simulate(days: int[][], slow: boolean): void
}

class Store {
  +Store(visible: boolean)
  +changeColor(newColor: String): void
  +makeVisible(): void
  +makeInvisible(): void
  #puedeRecibirRobot(robotTenges: int, storeTenges: int): boolean
  #procesarTransferencia(tengesRecolectados: int): int
}

abstract class StoreAbstracto {
  #positionX: int
  #positionY: int
  #sizeRectangle: int
  #sizeTriangle: int
  #color: String
  #isVisible: boolean
  #base: Rectangle
  #roof: Triangle
  --
  +StoreAbstracto(visible: boolean)
  +moveTo(x: int, y: int): void
  +setPosition(x: int, y: int): void
  +changeColor(newColor: String): void
  +makeVisible(): void
  +makeInvisible(): void
  #getRandomColor(): String
  +getX(): int
  +getY(): int
  +getColor(): String
  +isVisible(): boolean
  #validarTransferencia(tengesRecolectados: int): int
  +transferirTenges(cantidadSolicitada: int): int
  +getTengesActuales(): int
  #puedeRecibirRobot(robotTenges: int, storeTenges: int): boolean
  #procesarTransferencia(tengesRecolectados: int): int
  +obtenerMensajeRechazo(robotTenges: int, storeTenges: int): String
  #necesitaPosicionAleatoria(): boolean
}

class TenderRobot {
  +TenderRobot(visible: boolean)
  #updateParts(): void
  +makeVisible(): void
  +makeInvisible(): void
  #recolectarTenges(tengesDisponibles: int): int
  +calcularGanancia(tengesRecolectados: int, distancia: int): int
}

AutonomousStore --|> StoreAbstracto
CasinoStore --|> StoreAbstracto
FighterStore --|> StoreAbstracto
NeverbackRobot --|> RobotAbstracto
Road o-- Cell
Road *-- RobotAbstracto
Road *-- StoreAbstracto
Robot --|> RobotAbstracto
SilkRoad *-- Road
SilkRoad *-- ProgressBar
SilkRoad *-- RobotAbstracto
SilkRoad *-- StoreAbstracto
Store --|> StoreAbstracto
TenderRobot --|> RobotAbstracto
@enduml